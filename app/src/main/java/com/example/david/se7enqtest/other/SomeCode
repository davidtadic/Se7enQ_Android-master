public <T> T Get(String url, List<NameValuePair> params, final Class<T> objectClass) {
        InputStream inputStream = null;
        String paramString = URLEncodedUtils.format(params, "utf-8");
        url += "?" + paramString;

        try {
            URL urlGet = new URL(url);
            HttpURLConnection conn = (HttpURLConnection) urlGet.openConnection();
            conn.setRequestMethod("GET");
            conn.setDoInput(true);
            conn.addRequestProperty("Accept", "application/json");
            conn.addRequestProperty("Content-Type", "application/json");
            conn.connect();


            inputStream = conn.getInputStream();
            String resultString = convertStreamToString(inputStream);
            inputStream.close();

            return new GsonBuilder().create().fromJson(resultString, objectClass);

        } catch (IOException e) {
            e.printStackTrace();
        }

        return null;
    }


    public String convertStreamToString(InputStream inputStream) {
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
            StringBuilder stringBuilder = new StringBuilder();
            String line = null;
            try {
                while ((line = bufferedReader.readLine()) != null) {
                    stringBuilder.append(line + "\n");
                }
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    inputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            return stringBuilder.toString();
        }


    public <T> T postObject(String url, T object, Class<T> objectClass) throws IOException {

            OutputStream outputStream = null;


                URL urlPost =  new URL(url);
                HttpURLConnection conn = (HttpURLConnection) urlPost.openConnection();
                conn.setRequestMethod("POST");
                conn.setDoInput(true);
                conn.setDoOutput(true);
                conn.addRequestProperty("Accept", "application/json");
                conn.addRequestProperty("Content-Type", "application/json");
                conn.connect();

            return null;

        }

    class APICalling extends AsyncTask<String, Void, String> {

            int status = 0;

            @Override
            protected void onPreExecute() {
                progressBar.setVisibility(View.VISIBLE);
                responseView.setText("");
                ime = editText.getText().toString();
            }

            @Override
            protected String doInBackground(String... params) {

                BufferedReader bufferedReader = null;
                HttpURLConnection urlConnection = null;

                try {
                    URL url = new URL(URL_API+ime);
                    urlConnection = (HttpURLConnection) url.openConnection();


                    status = urlConnection.getResponseCode();
                    InputStream input = urlConnection.getInputStream();


                    bufferedReader = new BufferedReader(new InputStreamReader(input));
                    StringBuilder buffer = new StringBuilder();
                    String line;
                    while ((line = bufferedReader.readLine()) != null) {
                        buffer.append(line);
                    }

                    return buffer.toString();


                }
                catch(Exception e) {
                    Log.e("ERROR", e.getMessage(), e);
                    return null;
                }
                finally{
                    if(urlConnection != null){
                        urlConnection.disconnect();

                    }

                    try {
                        if (bufferedReader != null) {
                            bufferedReader.close();
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }

            @Override
            protected void onPostExecute(String response) {
                if(response == null) {
                    response = "THERE WAS AN ERROR";
                }
                progressBar.setVisibility(View.GONE);
                Log.i("INFO", response + status);
                responseView.setText(response);
            }
        }